2.0
{"\"":[["false","v"],["rt-thread-master/bsp/ls1cdev/d\n","V"],["gruvbox","v"],["rt-thread-master/bsp/frdm-k64f/device/MK64F12.h:1156:14:#define AIPS_PACRE_WP0(x)                        (((uint32_t)(((uint32_t)(x)) << AIPS_PACRE_WP0_SHIFT)) & AIPS_PACRE_WP0_MASK\n","V"],["dark","v"],["  nnoremap <C-E> 20<C-E>\n  nnoremap <C-Y> 20<C-Y>\n","V"],["desert","v"],["rt-thread-master/bsp/efm32/Libraries/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q31.c:943:42:  \n","V"],[" ['rg', 'ag',\n'pt', 'ack', 'grep', 'findstr']\n","v"],["  eval(binary)\n","V"],["  xxxx\n","V"],["g:clang_format_path","v"],["true","v"],["windows_index_type","v"],["rt-thread-master\\components\\dfs\\src\\dfs.c:14:#include <dfs_fs.h>\nrt-thread-master\\components\\dfs\\src\\dfs.c:15:#include <dfs_file.h>\nrt-thread-master\\components\\dfs\\src\\dfs.c:16:#include \"dfs_private.h\"\nrt-thread-master\\components\\dfs\\src\\dfs.c:26:const struct dfs_filesystem_ops *filesystem_operation_table[DFS_FILESYSTEM_TYPES_MAX];\nrt-thread-master\\components\\dfs\\src\\dfs.c:27:struct dfs_filesystem filesystem_table[DFS_FILESYSTEMS_MAX];\nrt-thread-master\\components\\dfs\\src\\dfs.c:36:static struct dfs_fdtable _fdtab;\nrt-thread-master\\components\\dfs\\src\\dfs.c:37:static int  fd_alloc(struct dfs_fdtable *fdt, int startfd);\nrt-thread-master\\components\\dfs\\src\\dfs.c:48:int dfs_init(void)\nrt-thread-master\\components\\dfs\\src\\dfs.c:81:        dfs_mount(NULL, \"/dev\", \"devfs\", 0, 0);\nrt-thread-master\\components\\dfs\\src\\dfs.c:89:INIT_PREV_EXPORT(dfs_init);\nrt-thread-master\\components\\dfs\\src\\dfs.c:96:void dfs_lock(void)\nrt-thread-master\\components\\dfs\\src\\dfs.c:116:void dfs_unlock(void)\nrt-thread-master\\components\\dfs\\src\\dfs.c:121:static int fd_alloc(struct dfs_fdtable *fdt, int startfd)\nrt-thread-master\\components\\dfs\\src\\dfs.c:138:        struct dfs_fd **fds;\nrt-thread-master\\components\\dfs\\src\\dfs.c:144:        fds = rt_realloc(fdt->fds, cnt * sizeof(struct dfs_fd *));\nrt-thread-master\\components\\dfs\\src\\dfs.c:157:    /* allocate  'struct dfs_fd' */\nrt-thread-master\\components\\dfs\\src\\dfs.c:160:        fdt->fds[idx] = rt_calloc(1, sizeof(struct dfs_fd));\nrt-thread-master\\components\\dfs\\src\\dfs.c:177:    struct dfs_fd *d;\nrt-thread-master\\components\\dfs\\src\\dfs.c:179:    struct dfs_fdtable *fdt;\nrt-thread-master\\components\\dfs\\src\\dfs.c:181:    fdt = dfs_fdtable_get();\nrt-thread-master\\components\\dfs\\src\\dfs.c:183:    dfs_lock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:201:    dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:214:struct dfs_fd *fd_get(int fd)\nrt-thread-master\\components\\dfs\\src\\dfs.c:216:    struct dfs_fd *d;\nrt-thread-master\\components\\dfs\\src\\dfs.c:217:    struct dfs_fdtable *fdt;\nrt-thread-master\\components\\dfs\\src\\dfs.c:224:    fdt = dfs_fdtable_get();\nrt-thread-master\\components\\dfs\\src\\dfs.c:229:    dfs_lock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:232:    /* check dfs_fd valid or not */\nrt-thread-master\\components\\dfs\\src\\dfs.c:235:        dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:241:    dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:251:void fd_put(struct dfs_fd *fd)\nrt-thread-master\\components\\dfs\\src\\dfs.c:255:    dfs_lock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:263:        struct dfs_fdtable *fdt;\nrt-thread-master\\components\\dfs\\src\\dfs.c:265:        fdt = dfs_fdtable_get();\nrt-thread-master\\components\\dfs\\src\\dfs.c:276:    dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:292:    struct dfs_filesystem *fs;\nrt-thread-master\\components\\dfs\\src\\dfs.c:293:    struct dfs_fd *fd;\nrt-thread-master\\components\\dfs\\src\\dfs.c:294:    struct dfs_fdtable *fdt;\nrt-thread-master\\components\\dfs\\src\\dfs.c:296:    fdt = dfs_fdtable_get();\nrt-thread-master\\components\\dfs\\src\\dfs.c:297:    fullpath = dfs_normalize_path(NULL, pathname);\nrt-thread-master\\components\\dfs\\src\\dfs.c:301:        fs = dfs_filesystem_lookup(fullpath);\nrt-thread-master\\components\\dfs\\src\\dfs.c:316:        dfs_lock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:327:                dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:332:        dfs_unlock();\nrt-thread-master\\components\\dfs\\src\\dfs.c:348:const char *dfs_subdir(const char *directory, const char *filename)\nrt-thread-master\\components\\dfs\\src\\dfs.c:363:RTM_EXPORT(dfs_subdir);\nrt-thread-master\\components\\dfs\\src\\dfs.c:374:char *dfs_normalize_path(const char *directory, const char *filename)\nrt-thread-master\\components\\dfs\\src\\dfs.c:497:RTM_EXPORT(dfs_normalize_path);\nrt-thread-master\\components\\dfs\\src\\dfs.c:502:struct dfs_fdtable* dfs_fdtable_get(void)\nrt-thread-master\\components\\dfs\\src\\dfs.c:504:    struct dfs_fdtable *fdt;\nrt-thread-master\\components\\dfs\\src\\dfs.c:525:    struct dfs_fdtable *fd_table;\nrt-thread-master\\components\\dfs\\src\\dfs.c:527:    fd_table = dfs_fdtable_get();\nrt-thread-master\\components\\dfs\\src\\dfs.c:536:        struct dfs_fd *fd = fd_table->fds[index];\n","V"],["  if has(\"cscope\")\n    if filereadable(\"/usr/local/bin/cscope\")\n      execute \"set csprg=/usr/local/bin/cscope\"\n    endif\n    if filereadable(\"/usr//bin/cscope\")\n      execute \"set csprg=/usr//bin/cscope\"\n    endif\n\n    \" csto = 0, cscope database will be search first, 1 ctags first\n    execute \"set csto=0\"\n\n    \" cst set this option so that search cscope and tags database at the\n    \" same time\n    execute \"set cst\"\n    \" set nocst\n    \" cscopeverbose\n    execute \"set nocsverb\"\n\n    \" add any database in current directory\n    if filereadable(\".cscope/cscope.out\")\n      cs add .cscope/cscope.out\n    \" else add database pointed to by environment\n    elseif $CSCOPE_DB != \"\"\n      cs add $CSCOPE_DB\n    endif\n\n    execute \"set csverb\"\n    execute \"set cscopequickfix=s-,c-,d-,i-,t-,e-,g-\"\n  endif\n","V"],["[[custom_plugins]]\nname = 'roxma/vim-tmux-clipboard'\n\n[[custom_plugins]]\nname = 'tmux-plugins/vim-tmux-focus-events'\n\n","V"]]}
